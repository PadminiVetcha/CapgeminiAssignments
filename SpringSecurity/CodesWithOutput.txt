***************************************************************************************************************************
						    ASSIGNMENT 1
***************************************************************************************************************************

COMMON FILE

SpringSecurityAssignmentApplication.java

package org.padmini.springsecurity;


import org.springframework.boot.SpringApplication;

import org.springframework.boot.autoconfigure.SpringBootApplication;


@SpringBootApplication

public class SpringSecurityAssignmentApplication 
{

	
	public static void main(String[] args) 
	{
		
		SpringApplication.run(SpringSecurityAssignmentApplication.class, args);

	}


}


1.created a spring boot application with spring initilizer with dependencies-web,spring security
(Controller1.java,Configuration1.java,SpringSecurityAssignmentApplication.java(refer to top of doc))

Controller1 .java
package org.padmini.springsecurity.controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class Controller1 
{
	@GetMapping("/")
	public String greet()
	{
		return "Hello";
	}
}

Configuration1 .java

package org.padmini.springsecurity.configuration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@EnableWebSecurity
public class Configuration1 extends WebSecurityConfigurerAdapter 
{
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception
	{
		auth.inMemoryAuthentication()
		.withUser("padmini").password("padminiuser").roles("USER")
		.and()
		.withUser("padminivetcha").password("padminiadmin").roles("ADMIN");
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception
	{
		http.authorizeRequests()
		.antMatchers("/admin").hasRole("ADMIN")
		.antMatchers("/user").hasAnyRole("USER","ADMIN")
		.antMatchers("/").permitAll()
		.and().formLogin();
	}
	
	@Bean
	public PasswordEncoder getPasswordEncoder()
	{
		return NoOpPasswordEncoder.getInstance();
	}	
}

output:
open browser and type http://localhost:8080/==========output will be "Hello"
http://localhost:8080/login============username:padminivetcha
					password:padminiadmin
output will be "hello"
give http://localhost:8080/logout to logout and then
http://localhost:8080/login============username:padmini
					password:padminiuser
output will be "hello"

2.(Controller2.java,Configuration1.java,login.html,SpringSecurityAssignmentApplication.java)

Controller2.java

package org.padmini.springsecurity.controller;
import org.springframework.stereotype.Controller; 
import org.springframework.web.bind.annotation.GetMapping;
@Controller 
public class Controller2 
{  
  @GetMapping("/login")
  public String login()
  { 
	  return "Login";
  } 
}
 
Configuration1.java(Modified not as same as in 1)

package org.padmini.springsecurity.configuration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@EnableWebSecurity
public class Configuration1 extends WebSecurityConfigurerAdapter 
{
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception
	{
		auth.inMemoryAuthentication()
		.withUser("padmini").password("padminiuser").roles("USER")
		.and()
		.withUser("padminivetcha").password("padminiadmin").roles("ADMIN");
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception
	{
		http.authorizeRequests()
		.antMatchers("/admin").hasRole("ADMIN")
		.antMatchers("/user").hasAnyRole("USER","ADMIN")
		.antMatchers("/").permitAll()
		.and().formLogin()
		.loginPage("/login");
	}
	
	@Bean
	public PasswordEncoder getPasswordEncoder()
	{
		return NoOpPasswordEncoder.getInstance();
	}	
}

login.html

<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org">
<head>
	<title>Login to continue</title>
</head>
<body>
	<form name="f" th:action=@{/login} method="post">
	<fieldset>
		<h1>Please Login</h1>
		<label for="username">UserName : </label>
		<input type="text" id="username" name="username"/>
		<br><br>
		<label for="password">Password : </label>
		<input type="text" id="password" name="password"/>
		<br><br>
		<input type="submit" value="submit"/>
		</fieldset>
	</form>
</body>
</html>

output::

NTG CHANGES IN THE OUPUT BUT INSTEAD OF GETTING DEFAULT HTML FORM IT PRODCES THE FORM THAT WE CREATED.
open browser and type http://localhost:8080/login==========output will be "Login"
open browser and type http://localhost:8080/==========output will be "Hello"
http://localhost:8080/login============username:padminivetcha
					password:padminiadmin
output will be "hello"
give http://localhost:8080/logout to logout and then
http://localhost:8080/login============username:padmini
					password:padminiuser
output will be "hello"

3.(Controller1.java,Configuration1.java,schema.sql,data.sql,SpringSecurityAssignmentApplication.java)

Controller1.java

package org.padmini.springsecurity.controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class Controller1 
{
	@GetMapping("/")
	public String greetEveryone()
	{
		return "Hello EveryOne .....!!!";
	}
	
	@GetMapping("/user")
	public String greetUser()
	{
		return "Hello User....!!!!";
	}
	
	@GetMapping("/admin")
	public String greetAdmin()
	{
		return "Hello Admin.....!!!!";
	}
}

Configuration1.java

package org.padmini.springsecurity.configuration;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@EnableWebSecurity
public class Configuration1 extends WebSecurityConfigurerAdapter 
{
	@Autowired
	DataSource dataSource;
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception
	{
		auth.jdbcAuthentication().dataSource(dataSource);
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception
	{
		http.authorizeRequests()
		.antMatchers("/admin").hasRole("ADMIN")
		.antMatchers("/user").hasAnyRole("USER","ADMIN")
		.antMatchers("/").permitAll()
		.and().formLogin()
		.loginPage("/login");
	}
	
	@Bean
	public PasswordEncoder getPasswordEncoder()
	{
		return NoOpPasswordEncoder.getInstance();
	}
}

schema.sql

CREATE TABLE users (
  username VARCHAR(50) NOT NULL,
  password VARCHAR(100) NOT NULL,
  enabled TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (username)
);


CREATE TABLE authorities (
  username VARCHAR(50) NOT NULL,
  authority VARCHAR(50) NOT NULL,
  FOREIGN KEY (username) REFERENCES users(username)
);


CREATE UNIQUE INDEX ix_auth_username
  on authorities (username,authority);

data.sql

INSERT INTO users (username, password, enabled)
  values ('padmini','padminiuser',true);
  

INSERT INTO users (username, password, enabled)
values ('padminivetcha','padminiadmin',true);


INSERT INTO authorities (username, authority)
  values ('padmini', 'ROLE_USER');
 
INSERT INTO authorities (username, authority)
values ('padminivetcha', 'ROLE_ADMIN');

output::

In browser if http://localhost:8080/=========Hello everyone....!!
http://localhost:8080/user===========username:padmini
				     password:padminiuser	
				     output=======Hello User...!!!!
http://localhost:8080/admin===========username:padminivetcha
				     password:padminiadmin	
				     output=======Hello Admin...!!!!

4.Didn't get it.


5.(Controller1.java,Configuration1.java,login.html,SpringSecurityAssignmentApplication.java)

Configuration1.java

package org.padmini.springsecurity.configuration;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@EnableWebSecurity
public class Configuration1 extends WebSecurityConfigurerAdapter 
{
	@Autowired
	DataSource dataSource;
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception
	{
		auth.jdbcAuthentication().dataSource(dataSource);
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception
	{
		http.authorizeRequests()
		.antMatchers("/admin").hasRole("ADMIN")
		.antMatchers("/user").hasAnyRole("USER","ADMIN")
		.antMatchers("/").permitAll()
		.and().formLogin().loginPage("/login")
		.and().rememberMe().key("rem-me-key")
		.rememberMeParameter("remember")
		.rememberMeCookieName("rememberlogin")
		.tokenValiditySeconds(100)
		.and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout"));
	}
	
	@Bean
	public PasswordEncoder getPasswordEncoder()
	{
		return NoOpPasswordEncoder.getInstance();
	}
}

login.html

<!DOCTYPE html>
<html xmlns:th="https://www.thymeleaf.org">
<head>
	<title>Login to continue</title>
</head>
<body>
	<form name="f" th:action=@{/login} method="post">
	<fieldset>
		<h1>Please Login</h1>
		<label for="username">UserName : </label>
		<input type="text" id="username" name="username"/>
		<br><br>
		<label for="password">Password : </label>
		<input type="password" id="password" name="password"/>
		<br><br>
		<label for="remember">Remember Me</label>
		<input type="checkbox" name="remember"/>
		<br><br>
		<input type="submit" value="submit"/>
		</fieldset>
	</form>
</body>
</html>

output::
In browser if http://localhost:8080/=========Hello everyone....!!
http://localhost:8080/user===========username:padmini
				     password:padminiuser
				     Tick the checkbox	
				     output=======Hello User...!!!!
next time if u close the browser and open a new browser and paste the url-http://localhost:8080/user
then no need to enter username and password but instead the output will be Hello User...!!!!
(same for /admin also)

6.(Controller1.java,Configuration1.java,login.html,SpringSecurityAssignmentApplication.java)

Configuration1.java

package org.padmini.springsecurity.configuration;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

@EnableWebSecurity
public class Configuration1 extends WebSecurityConfigurerAdapter 
{
	@Autowired
	DataSource dataSource;
	
	@Autowired
	private PasswordEncoder encoder; 
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception
	{
		
		  auth.inMemoryAuthentication()
		  .withUser("padmini").password(encoder.encode("padminiuser")).roles("USER") .and()
		  .withUser("padminivetcha").password(encoder.encode("padminiadmin")).roles("ADMIN");
		 
		/* auth.jdbcAuthentication().dataSource(dataSource); */
	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception
	{
		http.authorizeRequests()
		.antMatchers("/admin").hasRole("ADMIN")
		.antMatchers("/user").hasAnyRole("USER","ADMIN")
		.antMatchers("/").permitAll()
		.and().formLogin().loginPage("/login")
		.and().rememberMe().key("rem-me-key")
		.rememberMeParameter("remember")
		.rememberMeCookieName("rememberlogin")
		.tokenValiditySeconds(100)
		.and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout"));
	}
	
	/*
	 * @Bean public PasswordEncoder getPasswordEncoder() { return
	 * NoOpPasswordEncoder.getInstance(); }
	 */
	
	@Bean
	public PasswordEncoder encoder() {
	    return new BCryptPasswordEncoder();
	}
	  public void encode(String password) 
	  { 
		  for(int i=0;i<10;i++) 
		  {
			  BCryptPasswordEncoder passwordEncoder=new BCryptPasswordEncoder(); String
			  encodedPwd=passwordEncoder.encode(password); 
			  System.out.println(encodedPwd);
		  }
	  }
}

SpringSecurityAssignmentApplication.java

package org.padmini.springsecurity;

import org.springframework.boot.SpringApplication;

import org.springframework.boot.autoconfigure.SpringBootApplication;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;


@SpringBootApplication

public class SpringSecurityAssignmentApplication 
{

	
	public static void main(String[] args) 
	{
		
		SpringApplication.run(SpringSecurityAssignmentApplication.class, args);
	
		
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		
		String password1 = "padminiuser";
		
		String encodedPassword1 = passwordEncoder.encode(password1);
		
		System.out.println();
		
		System.out.println("Password is         : " + password1);
		
		System.out.println("Encoded Password is : " + encodedPassword1);


		String password2 = "padminiadmin";
		String encodedPassword2 = passwordEncoder.encode(password1);
		System.out.println();
		System.out.println("Password is         : " + password2);
		System.out.println("Encoded Password is : " + encodedPassword2);		
		
	}


}

output::

nothing changes u need to give the credentials while login but the password will be stored in encryption format
//from SpringSecurityAssignmentApplication.java printed in console.
Password is         : padminiuser
Encoded Password is : $2a$10$HehiFfsYC7DrGA3e8Rhq2OCsttQ4PyaR5lBybGfHTztsM8yC24Apy
Password is         : padminiadmin
Encoded Password is : $2a$10$q5AqcQf3ibitOZpbT4shU.1Hq81FM0uSmPmQyalq3QBhns.6p3w.W

***************************************************************************************************************************
						    ASSIGNMENT 2
***************************************************************************************************************************
1. Same as 1 in assignment 1
2. Same as 6 in assignment 1
3. Same as 5 in assignment 1 