1.Create a singleton class  (Singleton.java,SingletonEx.java)

Singleton.java

import java.io.*;
import java.util.*;
public class Singleton 
{
	// Create private attribute that refers to a singleton object
	private static Singleton single=new Singleton();
	
	//Create private constructor that restricts the object to create object
	//outside the class.
	private Singleton()
	{
		
	}
	//Allows us to create and access the object we created.
	public static Singleton getInstance()
	{
		return single;
	}
	public void getInfo()
	{
		System.out.println("In Singleton class...!!!");
	}

}

SingletonEx.java

import java.io.*;
import java.util.*;
public class SingletonEx 
{
	public static void main(String[] args) 
	{
		Singleton ex=Singleton.getInstance();
		ex.getInfo();

	}

}
output:
In Singleton class...!!!


2. Hiearchy of an organisation (Employee.java,Manager.java,Labour.java)

Employee.java
import java.io.*;
import java.util.*;
public class Employee 
{
	void salary()
	{
		int sal=25000;
		System.out.println("The salary of an Employee is Rs:" +sal);
		
	}
	public static void main(String[] args) 
	{
		Employee e1 = new Employee();
		e1.salary();
		Manager m1=new Manager();
		m1.salary();
		Labour l1=new Labour();
		l1.salary();
		
		
	}

}

Manager.java

public class Manager extends Employee 
{
	int incentives=6000;
	void salary()
	{
		int sal;
		sal=25000+incentives;
		System.out.println("The salary of a Manager is Rs:" +sal);
	}
}

Labour.java


public class Labour  extends Employee
{
	int overtime=3;
	void salary()
	{
		int sal;
		sal=8000+(3*200);
		System.out.println("The salary of a Labour is Rs:" +sal);
	}

}

output:

The salary of an Employee is Rs:25000
The salary of a Manager is Rs:31000
The salary of a Labour is Rs:8600

3.To create bank accounts and use polymorphism (BankAccounts.java)

import java.io.*;
import java.util.*;
public class BankAccounts 
{
	public static void main(String[] args) {
		int a1,a2,TotalCash;
		BankAccounts b1=new SavingsAccount();
		BankAccounts b2= new CurrentAccount();
		a1=((SavingsAccount) b1).cash();
		a2=((CurrentAccount) b2).cash();
		TotalCash=a1+a2;
		System.out.println("Total cash in the bank is Rs."+TotalCash);
	}

}
class SavingsAccount extends BankAccounts
{
	int cash()
	{
		int FixedDeposit=100000;
		return FixedDeposit;
		
	}
}
class CurrentAccount extends BankAccounts
{
	int cash()
	{
		int CashCredit=200000;
		return CashCredit;
	}
}

output:
Total cash in the bank is Rs.300000

4.





5. To draw shapes and use abstract.(Shape.java,Line.java,Rectangle.java,Cube.java)

Shape.java

import java.io.*;
import java.util.*;
public abstract class Shape 
{
	abstract void draw();
	
	public static void main(String[] args) 
	{
		Shape l=new Line();
		l.draw();
		Shape r=new Rectangle();
		r.draw();
		Shape c=new Cube();
		c.draw();
	}

}

Line.java

public class Line extends Shape
{
	@Override
	void draw() {
		System.out.println("The shape is LINE");
		
	}

}

Rectangle.java

public class Rectangle  extends Shape
{
	@Override
	void draw() 
	{
		System.out.println("The shape is RECTANGLE");
		
	}

}

Cube.java

public class Cube  extends Shape
{
	@Override
	void draw() 
	{
		System.out.println("The shape is CUBE");
		
	}

}

output:
The shape is LINE
The shape is RECTANGLE
The shape is CUBE

6.Abstract class persistence with file and database as its subclasses and a client class(Persistence.java,
FilePesistence.java,DatabasePersistence.java,Client.java)

Persistence.java

import java.io.*;
import java.util.*;
public abstract class Persistence
{
	abstract void persist();

}

FilePesistence.java

public class FilePesistence  extends Persistence{

	@Override
	void persist() {
		System.out.println("The data is saved in the file...");
		
	}

}

DatabasePersistence.java

public class DatabasePersistence extends Persistence {

	@Override
	void persist() {
		System.out.println("The data in not saved in database yet....");
		
	}

}

Client.java

import java.io.*;
import java.util.*;
public class Client 
{
	public static void main(String[] args)
	{
		Persistence fp=new FilePesistence();
		fp.persist();
		Persistence dp=new DatabasePersistence();
		dp.persist();
	}
}

output:

The data is saved in the file...
The data in not saved in database yet....

7.Dessert shop(DessertShop.java,IceCream.java,Candy.java,Application.java)

DessertShop.java

public abstract class DessertShop 
{
	abstract void getCost();
}


IceCream.java

public class IceCream extends DessertShop {
	int tax,count=0;
	public void getCost()
	{
		int cost=50;
		System.out.println("The cost of IceCream is Rs."+cost);			
	}
	public int add(int x) 
	{
		count=count+x;
		return count;
	}

}

Candy.java

public class Candy extends DessertShop {

	int tax,count=0;
	public void getCost()
	{
		int cost=20;
		System.out.println("The cost of Candy is $"+(cost));	
		int r=20*60;
		System.out.println("Cost in rupees:"+r);
	}
	public int add(int x) 
	{
		count=count+x;
		return count;
	}
}

Application.java

import java.util.Scanner;

public class Application 
{

	@SuppressWarnings("resource")
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		String r="No"; 
		System.out.println("Yes or No:");
		while(r!=sc.next())
		{
			//System.out.println("Yes or No:");
			System.out.println("Enter your role( 1 for Owner and 0 for customer )");
			int role=sc.nextInt();
			if(role==1)
			{
				System.out.println("Item u want to add(1 for icecream 0 for candy:)");
				int a=sc.nextInt();
				if(a==1)
				{
					IceCream ic=new IceCream();
					System.out.println("Enter the no of items to add:");
					int k=sc.nextInt();
					int b=ic.add(k);
					System.out.println(b);
					System.out.println("Count of Icecream is "+b);
				}
				else
				{
					Candy c=new Candy();
					System.out.println("Enter the no of items to add:");
					int s=sc.nextInt();
					int z=c.add(s);
					System.out.println("Count of candy is "+z);
				}
			}
			else
			{
				System.out.println("Item u want to order(1 for icecream 0 for candy:)");
				int a=sc.nextInt();
				if(a==1)
				{
					IceCream ic1=new IceCream();
					ic1.getCost();
				}
				else
				{
					Candy c1=new Candy();
					c1.getCost();
				}
				
			}
		}
	}
}

output:
Yes or No:
Yes
Enter your role( 1 for Owner and 0 for customer )
0
Item u want to order(1 for icecream 0 for candy:)
1
The cost of IceCream is Rs.50
Yes
Enter your role( 1 for Owner and 0 for customer )
1
Item u want to add(1 for icecream 0 for candy:)
1
Enter the no of items to add:
5
5
Count of Icecream is 5
