1.TreeSetEx.java(TreeSetEx.java,Person.java)

TreeSetEx.java
import java.util.*;
public class TreeSetEx 
{
	public static void main(String[] args)
	{
		Set<Person> ts=new TreeSet<>();
		Person p1=new Person(10,20,"Satish");
		Person p2=new Person(20,40,"Mani");
		Person p3=new Person(30,60,"Padmini");
		Person p4=new Person(40,80,"Jyothi");
		
		ts.add(p1);
		ts.add(p2);
		ts.add(p3);
		ts.add(p4);
		for (Person person : ts) {
			System.out.println(person.name);
		}
	}
}

Person.java
class Person implements Comparable<Person> 
{
	int height,weight;
	String name;
	public Person(int height, int weight, String name) {
		super();
		this.height = height;
		this.weight = weight;
		this.name = name;
	}
	@Override
	public int compareTo(Person o) {
		if(weight>o.weight)
		{
			return 1;
		}
		else if(weight<o.weight)
		{
			return -1;
		}
		else
		{
			if(height>o.height)
			{
				return 1;
			}
			else if(height<o.height)
			{
				return 0;
			}
			else
			{
				return 0;
			}
		}
	}
}

output:

Satish
Mani
Padmini
Jyothi

2.To prove hashset is unordered.(HashSetEx.java,LinkedHashSetEx.java)

HashSetEx.java
import java.util.*;
public class HashSetEx
{
	public static void main(String[] args)
	{
		
		HashSet<Integer> hs= new HashSet<>();
		hs.add(551);
		hs.add(2);
		hs.add(34);
		hs.add(4);
		hs.add(55);
		hs.add(6);
		System.out.println("The output of HashSet is :");
		System.out.println(hs);
		

	}

}

output:
The output of HashSet is :
[2, 34, 4, 6, 551, 55]

LinkedHashSetEx.java
import java.util.*;
public class LinkedHashSetEx
{
	public static void main(String[] args) 
	{
	LinkedHashSet<Integer> lhs1 = new LinkedHashSet<>();
	lhs1.add(1);
	lhs1.add(2);
	lhs1.add(3);
	lhs1.add(4);
	lhs1.add(5);
	lhs1.add(6);
	System.out.println("The output of LinkedHashSet is :");
	System.out.println(lhs1);

	}

}
output:
The output of LinkedHashSet is :
[1, 2, 3, 4, 5, 6]


3.Create in array list and print in backward direction.(ArrayListEx.java)

import java.util.*;
public class ArrayListEx 
{
	public static void main(String[] args) 
	{
		List<Integer> li = new ArrayList<>();
		li.add(11);
		li.add(22);
		li.add(33);
		li.add(44);
		li.add(55);
		li.add(66);
		System.out.println("Printing ArrayList using foreach: ");
		for (Integer integer : li) {
			System.out.println(integer);
		}
		System.out.println("--------------------------------------");
		System.out.println("Printing ArrayList using ListIterator: ");
		ListIterator<Integer> iter=li.listIterator(6);
		while(iter.hasPrevious())
		{
			System.out.println(iter.previous());
		}

	}

}

output:
Printing ArrayList using foreach: 
11
22
33
44
55
66
--------------------------------------
Printing ArrayList using ListIterator: 
66
55
44
33
22
11

#### Date.java not completed yet getting error

4.Create a hashmap and do with a class.(HashMapEx.java,Date.java )
HashMapEx.java
import java.util.*;
import java.util.Map.Entry;
public class HashMapEx 
{
	public static void main(String[] args)
	{
		HashMap<String,String> hs=new HashMap<>();
		hs.put("13-11-1998","Padmini");
		hs.put("04-07-2004","Jyothi");
		hs.put("22-01-1964","Satish");
		hs.put("02-06-1967","Mani");
		
		System.out.println("Printing HashMap:");
		System.out.println("------------------------------");
		for (Entry<String, String> m:hs.entrySet()) {
			System.out.println(m.getKey()+" "+m.getValue());
			
		}
		
	}

}

output:

Printing HashMap:
------------------------------
22-01-1964 Satish
04-07-2004 Jyothi
13-11-1998 Padmini
02-06-1967 Mani

Date.java ERRORRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
import java.time.LocalDate;
import java.time.Month;
import java.util.Scanner;
import java.io.*;
public class Date 
{
	public static void compareDates(String a)
	{
		LocalDate x=LocalDate.parse(a);
		int day1=x.getDayOfMonth();
		Month m1=x.getMonth();
		int year1=x.getYear();
		System.out.println(day1+" "+m1+" "+year1);
		
	/*	LocalDate y=LocalDate.parse(b);
		int day2=y.getDayOfMonth();
		Month m2=y.getMonth();
		int year2=y.getYear();
		System.out.println(day2+" "+m2+" "+year2);*/
		
	}
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		String d1,d2;
		System.out.println("Enter the first date: ");
		d1=sc.next();
		//System.out.println("Enter the second date: ");
		//d2=sc.next();
		compareDates(d1);
	}

}


5.Create a user defined employee that overrides equals() and hashcode()(EmployeeHashTable.java,HashTableEx.java)
EmployeeHashtable.java

class EmployeeHashtable
{
	public String name;
	public EmployeeHashtable(String name) {
		super();
		this.name = name;
	}
	public boolean equals(Object obj)
	{
		return true;
	}
	public int hashCode()
	{
		int a=13;
		return a;
	}
}

HashTableEx.java

import java.util.*;
public class HashTableEx 
{
	public static void main(String[] args) 
	{
		Hashtable<EmployeeHashtable,String> ht= new Hashtable<>();
		EmployeeHashtable e1=new EmployeeHashtable("Padmini");
		EmployeeHashtable e2=new EmployeeHashtable("Jyothi");
		ht.put(e1, "One");
		ht.put(e2, "Two");
		System.out.println(ht);
		
	}

}

output:
{EmployeeHashtable@d=Two}

6.























7.






















8.



















9.(SavingsAccCollections .java,BankAccListCollections .java)
public class SavingsAccCollections 
{
	Double acc_balance;
	int acc_id;
	String accHolderName;
	boolean isSalaryAccount;
	
	public SavingsAccCollections(Double acc_balance, int acc_id, String accHolderName, boolean isSalaryAccount) {
		super();
		this.acc_balance = acc_balance;
		this.acc_id = acc_id;
		this.accHolderName = accHolderName;
		this.isSalaryAccount = isSalaryAccount;
	}

	public Double getAcc_balance() {
		return acc_balance;
	}

	public void setAcc_balance(Double acc_balance) {
		this.acc_balance = acc_balance;
	}

	public int getAcc_id() {
		return acc_id;
	}

	public void setAcc_id(int acc_id) {
		this.acc_id = acc_id;
	}

	public String getAccHolderName() {
		return accHolderName;
	}

	public void setAccHolderName(String accHolderName) {
		this.accHolderName = accHolderName;
	}

	public boolean isSalaryAccount() {
		return isSalaryAccount;
	}

	public void setSalaryAccount(boolean isSalaryAccount) {
		this.isSalaryAccount = isSalaryAccount;
	}
	
	public void updateBalance(int num,int amt)
	{
		if(num==0)
		{
			acc_balance=acc_balance-amt;
		}
		else
		{
			acc_balance=acc_balance+amt;
		}
	}
}

BankAccListCollections .java

import java.util.HashSet;

public class BankAccListCollections 
{

	public static void main(String[] args)
	{
		HashSet<SavingsAccCollections> ss = new HashSet<SavingsAccCollections>();
		SavingsAccCollections s1=new SavingsAccCollections(4500.4, 1211, "Padmini", true);
		SavingsAccCollections s2=new SavingsAccCollections(3500.5, 3245, "Jyothi", true);
		SavingsAccCollections s3=new SavingsAccCollections(6500.6, 2199, "Mani", false);
		s3.updateBalance(0,500);
		ss.add(s1);
		ss.add(s2);
		ss.add(s3);
		for(SavingsAccCollections sac:ss)
		{
			System.out.println("Account id: " + sac.acc_id +" Account Holder Name: "+sac.accHolderName+ " Balance: "+ sac.acc_balance);
		}
		
	}
}

output:

Account id: 3245 Account Holder Name: Jyothi Balance: 3500.5
Account id: 1211 Account Holder Name: Padmini Balance: 4500.4
Account id: 2199 Account Holder Name: Mani Balance: 6000.6

